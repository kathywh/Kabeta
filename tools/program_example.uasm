.include ../../tools/kabeta.uasm

||====================================================================================||
||                                    Data Segment                                    ||
||====================================================================================||
LOCATE(0)

| Stack
stack:
	STORAGE(256)

| 32-bit variable
var1:
	STORAGE(1)
var2:
	STORAGE(1)

| Word array
array:
	STORAGE(16)
array2:
	STORAGE(8)

||====================================================================================||
||                                    I/O  Segment                                    ||
||====================================================================================||
LOCATE(0x000)
EIC_IE:	
	STORAGE(1)		| 0x000, WO
EIC_IN:
	STORAGE(1)		| 0x004, RO

||====================================================================================||
||                                 Exception  Vectors                                 ||
||====================================================================================||
EXCVT()

rst_vec:
	BR(start)
svc_vec:
	BR(svc_esr)
ill_vec:
	BR(.)
inv_op_vec:
	BR(.)
inv_da_vec:
	BR(.)
inv_ia_vec:
	BR(.)
irq_vec:
	BR(irq_esr)
urq_vec:
	BR(.)

||====================================================================================||
||                                    Code Segment                                    ||
||====================================================================================||
LOCATE(0x100)

	|-------------------------------------------------------------------------------|
	| IRQ Handler                                                                   |
	|-------------------------------------------------------------------------------|

irq_esr:
	| Adjust XP
	SUBC(XP, 4, XP)

	| Save registers
	PUSH(R0)
	PUSH(R1)
	PUSH(R2)

	| Get interrupt number
	IOR(EIC_IN, R1)				| R1: interrupt number

	| Process interrupt
	| ...

irq_end:
	| Restore registers
	POP(R2)
	POP(R1)
	POP(R0)

	| Return
	JMP(XP)

	|-------------------------------------------------------------------------------|
	| SVC Handler                                                                   |
	|-------------------------------------------------------------------------------|
	
svc_esr:
	| Save registers
	PUSH(R1)
	PUSH(R2)
	PUSH(R3)

	| Process svc
	| ...

svc_end:
	| Restore registers
	POP(R3)
	POP(R2)
	POP(R1)

	| Return
	JMP(XP)

	|-------------------------------------------------------------------------------|
	| System initialization                                                         |
	|-------------------------------------------------------------------------------|

start:

	| Set SP
	MOVC(stack, SP)

	| Init data segment
	| ...

	| Set up I/O components
	| ...

	| Enable interrupt
	MOVC(1, R0)
	IOWAIT()
	IOW(R0, EIC_IE)

	| Switch to User Mode
	MOVC(user_mode%PC_MASK, R0)
	JMP(R0)
user_mode:

	|-------------------------------------------------------------------------------|
	| Main loop                                                                     |
	|-------------------------------------------------------------------------------|
main_loop:
	
	| Main loop body
	| ...

	BR(main_loop)

||====================================================================================||
||                                  Literal  Segment                                  ||
||====================================================================================||
LITERAL()

const_a:
	LONG(0xFEAB1234)
const_b:
	LONG(0x567890CD)

|--------------------------------------|
| Program Signature                    |
|--------------------------------------|
LOCATE(0x0FFC)
__signature:
	LONG(0xCA3EBE3A)