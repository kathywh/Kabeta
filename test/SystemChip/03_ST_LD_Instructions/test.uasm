.include ../../../tools/kabeta.uasm

||====================================================================================||
||                                Constant Definitions                                ||
||====================================================================================||

ARR_SIZE = 10

||====================================================================================||
||                                 User Data Segment                                  ||
||====================================================================================||
LOCATE(0x0800)

array:
	STORAGE(ARR_SIZE)

||====================================================================================||
||                                 Exception  Vectors                                 ||
||====================================================================================||
EXCVT()

rst_vec:
	BR(start)
svc_vec:
	BR(.)
ill_vec:
	BR(.)
inv_op_vec:
	BR(.)
inv_da_vec:
	BR(.)
inv_ia_vec:
	BR(.)
irq_vec:
	BR(.)
urq_vec:
	BR(.)

||====================================================================================||
||                              Supervisor Code Segment                               ||
||====================================================================================||
LOCATE(0x0080)

start:
	| Switch to User Mode
	MOVC(user_start%PC_MASK, R0)
	JMP(R0)

||====================================================================================||
||                                  User Code Segment                                 ||
||====================================================================================||
LOCATE(0x0800)
user_start:

	| Store data
	|   R0 - offset
	|   R1 - data to write, array[i] <= 0x55AA3700+i
	|   R4 - counter
	MOVC(0, R0)
	MOVC(ARR_SIZE, R4)
	MOVC(0x55AA, R1)
	SHLC(R1, 16, R1)
	ORC(R1, 0x3700, R1)
loop_st:
	ST(R1, R0, array)
	ADDC(R0, 4, R0)
	ADDC(R1, 1, R1)
	SUBC(R4, 1, R4)
	BNE(R4, loop_st)		| branch if r4 != 0

	| Load data
	|   R0 - offset
	|   R4 - counter
	MOVC(0, R0)
	MOVC(ARR_SIZE, R4)
loop_ld:
	BEQ(R4, ld_end)			| branch if r4 == 0
	LD(R0, array, R1)
	ADDC(R0, 4, R0)
	SUBC(R4, 1, R4)	
	BR(loop_ld)
ld_end:

	| Load immediate
	|   R0 - offset
	|   R4 - counter
	MOVC(0, R0)
	MOVC(8, R4)
loop_ldi:
	BEQ(R4, ldi_end)			| branch if r4 == 0
	LDI(R0, const_tab, R1)
	ADDC(R0, 4, R0)
	SUBC(R4, 1, R4)	
	BR(loop_ldi)
ldi_end:

	NOP()
	NOP()

end:
	BR(.)

||====================================================================================||
||                               User Literal  Segment                                ||
||====================================================================================||
LITERAL()

LOCATE(0x0C00)
const_tab:
	LONG(0xABCD1290)
	LONG(0xABCD1291)
	LONG(0xABCD1292)
	LONG(0xABCD1293)
	LONG(0xABCD1294)
	LONG(0xABCD1295)
	LONG(0xABCD1296)
	LONG(0xABCD1297)

|--------------------------------------|
| Program Signature                    |
|--------------------------------------|
LOCATE(0x0FFC)
__signature:
	LONG(0xCA3EBE3A)