.include ../../../tools/kabeta.uasm

|--------------------------------------
| data segment
|--------------------------------------
__DATA(0)

| stack
stack:
	STORAGE(256)

|--------------------------------------
| exception vectors
|--------------------------------------
__EXC()

rst_vec:
	BR(start)
svc_vec:
	BR(.)
ill_vec:
	BR(ill_esr)
inv_op_vec:
	BR(.)
inv_da_vec:
	BR(.)
inv_ia_vec:
	BR(.)
irq0_vec:
	BR(.)
irq1_vec:
	BR(.)

|--------------------------------------
| code segment
|--------------------------------------
__CODE(0x20)

	| Illegal Instruction Handler
	|   Return to next instruction.
ill_esr:
	PUSH(XP)
	PUSH(R0)
	PUSH(R1)
	| Process illegal instruction fault here,
	| assuming R0 & R1 will be used.
	POP(R1)
	POP(R0)
	POP(XP)
	JMP(XP)

	| Reset vector jump here
start:

	| Set SP
	MOVC(stack, SP)

	| Switch to User Mode
	MOVC(user_mode%PC_MASK, R0)
	JMP(R0)
user_mode:

	MOVC(0x59C1, R0)
	MOVC(0x59C2, R1)
	MOVC(0x59C3, R2)

	| Illegal Instructions
	betaop(0x1A, 0, 0, 0)		| 0: opcode=011_010
	betaop(0x10, 0, 0, 0)		| 1: opcode=010_000
	betaop(0x11, 0, 0, 0)		| 2: opcode=010_001
	betaop(0x12, 0, 0, 0)		| 3: opcode=010_010
	betaop(0x13, 0, 0, 0)		| 4: opcode=010_011
	betaop(0x14, 0, 0, 0)		| 5: opcode=010_100
	betaop(0x15, 0, 0, 0)		| 6: opcode=010_101
	betaop(0x16, 0, 0, 0)		| 7: opcode=010_110
	betaop(0x17, 0, 0, 0)		| 8: opcode=010_111

	CMPLE(R1, R2, R28)
	CMPLE(R2, R1, R29)
	ADD(R1, R2, R3)

end:
	BR(.)