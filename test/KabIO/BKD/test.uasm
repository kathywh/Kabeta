.include ../../../tools/kabeta.uasm

|--------------------------------------
| const definitions
|--------------------------------------

| Interrupt Numbers
BKD_KPI	= 1			| BKD: Key Press Interrupt

|--------------------------------------
| data segment
|--------------------------------------
LOCATE(0)

| stack
stack:
	STORAGE(256)

|--------------------------------------
| I/O segment
|--------------------------------------
LOCATE(0)
EIC_IE:	
	STORAGE(1)		| 0x000, WO
EIC_IN:
	STORAGE(1)		| 0x004, RO

LOCATE(0x040)
BKD_LEDC:
	STORAGE(1)		| 0x040, RW
BKD_SSDC:
	STORAGE(1)		| 0x044, RW
BKD_KDIE:
	STORAGE(1)		| 0x048, WO
BKD_KEYS:
	STORAGE(1)		| 0x04C, RC

|--------------------------------------
| exception vectors
|--------------------------------------
EXCVT()

rst_vec:
	BR(start)
svc_vec:
	BR(.)
ill_vec:
	BR(.)
inv_op_vec:
	BR(.)
inv_da_vec:
	BR(.)
inv_ia_vec:
	BR(.)
irq0_vec:
	BR(irq0_esr)
irq1_vec:
	BR(.)

|--------------------------------------
| code segment
|--------------------------------------
LOCATE(0x100)

	| IRQ0 Handler
irq0_esr:
	| Adjust & save XP
	SUBC(XP, 4, XP)
	PUSH(XP)

	| Save registers
	PUSH(R0)
	PUSH(R1)
	PUSH(R2)

	| Get interrupt number
	IOR(EIC_IN, R1)			| R1: interrupt number

	| If key int, read key status
	CMPEQC(R1, BKD_KPI, R0)
	BF(R0, irq0_rks_end)
	IOR(BKD_KEYS, R2)		| Read key status reg
	IOR(BKD_KEYS, R2)		| Read again, check if cleared
	BR(irq0_end)
irq0_rks_end:

irq0_end:
	| Restore registers
	POP(R2)
	POP(R1)
	POP(R0)

	| Restore XP then return
	POP(XP)
	JMP(XP)

start:
	| Set SP
	MOVC(stack, SP)

	| Run some code
	MOVC(0x5A00, R20)
	MOVC(0x5A01, R21)
	MOVC(0x5A02, R22)
	MOVC(0x5A03, R23)

	| Blink LED
	MOVC(0x01, R0)	| R0: led turn on/off
	MOVC(3, R1)		| R1: blink count

blink_led:	
	IOW(R0, BKD_LEDC)
	XORC(R0, 1, R0)

	MOVC(20, R2)	| R2: delay count
blink_delay:
	SUBC(R2, 1, R2)
	BT(R2, blink_delay)

	SUBC(R1, 1, R1)
	BT(R1, blink_led)

	| Enable Key Interrupt
	MOVC(1, R0)
	IOW(R0, BKD_KDIE)

	| Delay between IOW
	MOVC(3, R0)	| R0: delay count
en_int_delay:
	SUBC(R0, 1, R0)
	BT(R0, en_int_delay)

	| Enable interrupt
	MOVC(1, R0)
	IOW(R0, EIC_IE)

	| Switch to User Mode
	MOVC(user_mode%PC_MASK, R0)
	JMP(R0)
user_mode:

	| Run some code
	MOVC(0x2F00, R20)
	MOVC(0x2F01, R21)
	MOVC(0x2F02, R22)
	MOVC(0x2F03, R23)

end:
	BR(.)

|--------------------------------------
| literal segment
|--------------------------------------
LITERAL()
	LONG(0xFEED0001)
	LONG(0xFEED0002)
	LONG(0xFEED0003)
	LONG(0xFEED0004)

|--------------------------------------
| signature
|--------------------------------------
LOCATE(0x0FFC)
__signature:
	LONG(0xCA3EBE3A)
