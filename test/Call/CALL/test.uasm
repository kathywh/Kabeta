.include ../../../tools/kabeta.uasm

||============================================================================||
||                             User Data Segment                              ||
||============================================================================||
LOCATE(0x0800)

| stack
stack:
	STORAGE(256)

||============================================================================||
||                             Exception  Vectors                             ||
||============================================================================||
EXCVT()

rst_vec:
	BR(start)
svc_vec:
	BR(.)
ill_vec:
	BR(.)
inv_op_vec:
	BR(.)
inv_da_vec:
	BR(.)
inv_ia_vec:
	BR(.)
irq0_vec:
	BR(.)
irq1_vec:
	BR(.)

||============================================================================||
||                          Supervisor Code Segment                           ||
||============================================================================||
LOCATE(0x0080)

	|----------------------------------------------------------------------|
	| System initialization                                                |
	|----------------------------------------------------------------------|

start:

	| Set SP
	MOVC(stack, SP)

	| Switch to User Mode
	MOVC(user_start%PC_MASK, R0)
	JMP(R0)
	
||============================================================================||
||                              User Code Segment                             ||
||============================================================================||
LOCATE(0x0800)
user_start:

	| Set init values of registers
	MOVC(0x59C1, R0)
	MOVC(0x59C2, R1)
	MOVC(0x59C3, R2)
	MOVC(0x59C4, R3)

	| Call sub1(a1, a2, a3)
	| a1=R0=0x59c1
	| a2=R1=0x59c2
	| a3=R2=0x59c3
	PUSH(R2)
	PUSH(R1)
	PUSH(R0)
	CALL(sub1, 3)

	| Test arg
	LD(SP, 0, R23)		| R23 <- a3=0x59c3
	LD(SP, 4, R22)		| R22 <- a2=0x59c3
	LD(SP, 8, R21)		| R21 <- a1=0x59c2

	| Test reg
	MOV(R0, R10)		| R0=0xb383
	MOV(R1, R11)		| R1=0x59c2
	MOV(R2, R12)		| R2=0x59c3

	MOVC(0x59C5, R4)
	MOVC(0x59C6, R5)
	MOVC(0x59C7, R6)
	MOVC(0x59C8, R7)
	MOVC(0x59C9, R8)

end:
	BR(.)

sub1:
	| sub1(a1, a2, a3)

	| argument/local numbers
	A1 = 0
	A2 = 1
	A3 = 2
	L1 = 0
	L2 = 1

	| prologue
	PUSH(LP)
	PUSH(BP)
	MOV(SP, BP)
	ALLOCATE(2)			| allocate space for locals
	PUSH(R1)
	PUSH(R2)

	GETARG(A1, R1)
	GETARG(A2, R2)
	ADD(R1, R2, R0)		| R0 <- return value

	ADDC(R1, 1, R1)
	ADDC(R2, 1, R2)
	PUTARG(R1, A1)
	PUTARG(R2, A2)

	PUTVAR(R1, L1)
	PUTVAR(R2, L2)

	GETVAR(L2, R1)		| R1 <- 0x59c3 @ PC_IF=0x8bc
	GETVAR(L1, R2)		| R2 <- 0x59c2 @ PC_IF=0x8c0

	MOVC(0x9010, R9)
	MOVC(0x9011, R10)
	MOVC(0x9012, R11)
	MOVC(0x9013, R12)
	MOVC(0x9014, R13)
	MOVC(0xFEEF, R14)

	| epilogue
	POP(R2)
	POP(R1)
	MOV(BP, SP)			| deallocate space for locals
	POP(BP)
	POP(LP)
	RTN()

	| end of sub1

||============================================================================||
||                           User Literal  Segment                            ||
||============================================================================||
LITERAL()
	LONG(0xFEED0001)
	LONG(0xFEED0002)
	LONG(0xFEED0003)
	LONG(0xFEED0004)

    |----------------------------------------------------------------------|
    | Program Signature                                                    |
    |----------------------------------------------------------------------|
LOCATE(0x0FFC)
__signature:
	LONG(0xCA3EBE3A)